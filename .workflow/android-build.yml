version: '1.0'
name: android-apk-build

displayName: Android APK自动构建

# 定义环境变量
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false

# 定义触发规则
triggers:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

# 定义执行阶段
stages:
  - name: prepare
    displayName: 准备阶段
    strategy: naturally
    trigger: auto
    executor:
      type: shared
      labels:
        - gitee-docker-android
    steps:
      - step: shell@sh
        displayName: 检查环境
        script: |
          echo "========== 环境信息 =========="
          echo "Java版本:"
          java -version
          echo "Gradle版本:"
          gradle -version
          echo "Android SDK路径:"
          echo $ANDROID_HOME
          echo "当前工作目录:"
          pwd
          echo "项目文件结构:"
          ls -la

  - name: build
    displayName: 构建阶段
    strategy: naturally
    trigger: auto
    executor:
      type: shared
      labels:
        - gitee-docker-android
    steps:
      - step: shell@sh
        displayName: 设置Gradle Wrapper权限
        script: |
          echo "========== 设置Gradle Wrapper权限 =========="
          chmod +x gradlew
          chmod +x gradle/wrapper/gradle-wrapper.jar

      - step: shell@sh
        displayName: 清理和初始化
        script: |
          echo "========== 清理项目 =========="
          ./gradlew clean --info
          
      - step: shell@sh
        displayName: 下载依赖
        script: |
          echo "========== 下载依赖 =========="
          ./gradlew dependencies --info

      - step: shell@sh
        displayName: 编译项目
        script: |
          echo "========== 编译项目 =========="
          ./gradlew compileDebugSources --info

      - step: shell@sh
        displayName: 运行测试
        script: |
          echo "========== 运行测试 =========="
          ./gradlew testDebugUnitTest --info

      - step: shell@sh
        displayName: 构建Debug APK
        script: |
          echo "========== 构建Debug APK =========="
          ./gradlew assembleDebug --info
          echo "Debug APK构建完成"
          ls -la app/build/outputs/apk/debug/

  - name: release
    displayName: 发布阶段
    strategy: naturally
    trigger: auto
    executor:
      type: shared
      labels:
        - gitee-docker-android
    steps:
      - step: shell@sh
        displayName: 配置签名信息
        script: |
          echo "========== 配置签名信息 =========="
          # 检查是否提供了生产环境的签名信息
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "使用生产环境签名配置"
            echo "$KEYSTORE_BASE64" | base64 -d > app/src/main/keystore/release.keystore
            echo "STORE_FILE=../src/main/keystore/release.keystore" >> local.properties
            echo "STORE_PASSWORD=$KEYSTORE_PASSWORD" >> local.properties
            echo "KEY_ALIAS=$KEY_ALIAS" >> local.properties
            echo "KEY_PASSWORD=$KEY_PASSWORD" >> local.properties
          else
            echo "使用调试签名配置"
            echo "STORE_FILE=../src/main/keystore/debug.keystore" >> local.properties
            echo "STORE_PASSWORD=android" >> local.properties
            echo "KEY_ALIAS=androiddebugkey" >> local.properties
            echo "KEY_PASSWORD=android" >> local.properties
          fi
          
      - step: shell@sh
        displayName: 构建Release APK
        script: |
          echo "========== 构建Release APK =========="
          ./gradlew assembleRelease --info
          echo "Release APK构建完成"
          ls -la app/build/outputs/apk/release/

      - step: publish@general_artifacts
        displayName: 发布APK产物
        path: 
          - app/build/outputs/apk/**/*.apk
        target: 
          - android-apk
        enable: true

      - step: shell@sh
        displayName: 生成构建报告
        script: |
          echo "========== 生成构建报告 =========="
          echo "构建时间: $(date)" > build-report.txt
          echo "Git提交: $(git rev-parse HEAD)" >> build-report.txt
          echo "分支: $(git branch --show-current)" >> build-report.txt
          echo "构建成功!" >> build-report.txt
          cat build-report.txt

      - step: publish@general_artifacts
        displayName: 发布构建报告
        path: 
          - build-report.txt
        target: 
          - build-report
        enable: true